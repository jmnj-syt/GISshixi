# -*- coding: utf-8 -*-
"""
/***************************************************************************
 tsp
                                 A QGIS plugin
 tsp
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-18
        git sha              : $Format:%H$
        copyright            : (C) 2024 by jie
        email                : 2057116416@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import QgsProject, QgsPointXY, QgsProcessingFeedback, QgsCoordinateReferenceSystem, QgsVectorFileWriter, \
    QgsFields, QgsVectorLayer, QgsField
from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .tsp_dialog import tspDialog
import os.path
import numpy as np


class tsp:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'tsp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&tsp')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('tsp', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/tsp/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'tsp'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&tsp'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = tspDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            output_dir = self.dlg.lineEditOutput.text()
            point_layer_name = self.dlg.PointmMapLayerComboBox.currentText()
            point_layer = QgsProject.instance().mapLayersByName(point_layer_name)[0]
            road_layer_name = self.dlg.RoadmMapLayerComboBox.currentText()
            road_layer = QgsProject.instance().mapLayersByName(road_layer_name)[0]

            self.vectorLayer = road_layer
            self.pointCast(point_layer)

            point_list = list(range(len(self.point)))
            path = self.solve_tsp_greedy(point_list, self.cost_arr)
            print("路径:", path)
            self.visualMap(path,output_dir)

    def pointCast(self, layer):
        self.point = []
        # 获取图层所有要素
        features = layer.getFeatures()
        # 遍历图层中的所有点
        for feature in features:
            geom = feature.geometry()
            if geom.isEmpty():
                continue  # 过滤无效几何
            points = geom.asPoint()
            self.point.append([points.x(), points.y()])

        num = len(self.point)
        # 根据y值对self.point进行排序
        self.point.sort(key=lambda p: p[1])

        self.cost_arr = np.zeros((num, num))
        # 计算点之间的成本:dijkstra算法
        for i in range(len(self.point)):
            for j in range(i + 1):
                startPoint = QgsPointXY(self.point[i][0], self.point[i][1])
                endPoint = QgsPointXY(self.point[j][0], self.point[j][1])

                if startPoint == endPoint:
                    self.cost_arr[i][j] = 0
                    self.cost_arr[j][i] = 0
                else:
                    params = {
                        'INPUT': self.vectorLayer,
                        'START_POINT': startPoint,
                        'END_POINT': endPoint,
                        'STRATEGY': 0,  # shortest path
                        'DEFAULT_DIRECTION': 2,  # both directions
                        'DEFAULT_SPEED': 50,
                        'TOLERANCE': 0,
                        'OUTPUT': 'memory:'
                    }

                    result = processing.run('native:shortestpathpointtopoint', params, feedback=QgsProcessingFeedback())
                    cost = result['TRAVEL_COST']

                    self.cost_arr[i][j] = cost
                    self.cost_arr[j][i] = cost
        print(self.cost_arr)


    # tsp算法，y序插入值最小
    def calculate_insertion_cost(self, path, dist_matrix, new_point):
        min_cost = float('inf')
        best_position = 0
        for i in range(1, len(path)):
            cost = (dist_matrix[path[i - 1]][new_point] +
                    dist_matrix[new_point][path[i]] -
                    dist_matrix[path[i - 1]][path[i]])
            if cost < min_cost:
                min_cost = cost
                best_position = i
        return min_cost, best_position

    def insert_point_greedy(self, path, dist_matrix, new_point):
        min_cost, best_position = self.calculate_insertion_cost(path, dist_matrix, new_point)
        path.insert(best_position, new_point)
        return path

    def solve_tsp_greedy(self, points, dist_matrix):
        # 初始化路径
        path = [points.pop(0)]
        path.append(points.pop(0))

        while points:
            new_point = points.pop(0)
            path = self.insert_point_greedy(path, dist_matrix, new_point)

        return path

    def visualMap(self,path,output_dir):
        # 创建一个空图层用于存储所有最短路径
        crs = self.vectorLayer.crs()
        fields = QgsFields()
        fields.append(QgsField("start", QVariant.String))
        fields.append(QgsField("end", QVariant.String))
        fields.append(QgsField("cost", QVariant.Double))
        shortest_path_layer = QgsVectorLayer("LineString?crs={}".format(crs.authid()), "shortest_paths", "memory")
        shortest_path_layer.startEditing()
        shortest_path_layer.dataProvider().addAttributes(fields)
        shortest_path_layer.commitChanges()

        for i in range(len(path)):
            # 跳过最后一个节点，因为没有后续节点
            if i + 1 == len(path):
                continue
            start_node = path[i]
            end_node = path[i + 1]
            print(start_node,'-->',end_node)
            # 节点坐标
            startPoint = QgsPointXY(self.point[start_node][0], self.point[start_node][1])
            endPoint = QgsPointXY(self.point[end_node][0], self.point[end_node][1])
            # 各点之间最短路径
            params = {
                'INPUT': self.vectorLayer,
                'START_POINT': startPoint,
                'END_POINT': endPoint,
                'STRATEGY': 0,  # shortest path
                'DEFAULT_DIRECTION': 2,  # both directions
                'DEFAULT_SPEED': 50,
                'TOLERANCE': 0,
                'OUTPUT': 'memory:shortest_path'
            }
            result = processing.run('native:shortestpathpointtopoint', params, feedback=QgsProcessingFeedback())
            shortest_path = result['OUTPUT']

            # 确认 shortest_path 图层中是否有要素
            features = list(shortest_path.getFeatures())
            print(f"Number of features found: {len(features)}")
            if not features:
                print(f"No features found for path from {start_node} to {end_node}")
                continue

            # 将每个最短路径添加到空图层中
            features = shortest_path.getFeatures()
            shortest_path_layer.startEditing()
            for feature in features:
                print(f"Adding feature with ID: {feature.id()} and geometry: {feature.geometry().asWkt()}")
                shortest_path_layer.addFeature(feature)
            shortest_path_layer.commitChanges()

        # 将所有最短路径合并并保存到输出目录
        QgsVectorFileWriter.writeAsVectorFormat(shortest_path_layer, output_dir, "UTF-8", crs, "ESRI Shapefile")

        # 将结果图层加载到QGIS中
        QgsProject.instance().addMapLayer(shortest_path_layer)